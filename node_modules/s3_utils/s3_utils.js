var async = require('async')
var AWS = require('aws-sdk')
var s3 = new AWS.S3();

exports.init_bucket_if_not_exists = function(bucket_name){
  s3.listBuckets(function(err, data) {
    if (err) {
      console.log(err, err.stack);
    }else{
      _bucket_in(bucket_name, data, function(in_data){
        if (!in_data){ _init_bucket(bucket_name) }
      })
    }
  });
}

_bucket_in = function(bucket_name, data, callback){
  async.reduce(data.Buckets, false, function(memo, item, done_item){
    if (item.Name == bucket_name){
      done_item(null, true)
    }else{
      done_item(null, memo)
    }
  }, function(err, result){
    if (err){
      console.log(err)
      throw err
    }
    callback(result)
  })
}

_init_bucket = function(bucket_name){
  var params = {
    Bucket: bucket_name,
    ACL: 'private'
  }
  s3.createBucket(params, function(err, data) {
    if (err) console.log(err, err.stack);
    else console.log('initialized bucket',data);
  });
}

exports.put_obj = function(bucket_name, key, obj, callback, error){
  //TODO: no need for the json parsing middleware, could treat as string
  var obj_json = JSON.stringify(obj)
  var params = {
    Bucket: bucket_name,
    Key: key,
    Body: obj_json
  }
  s3.putObject(params, function(err, data){
    if (err){ 
      console.log(err, err.stack);
      error(err)
    }else{
      console.log('put s3 obj', data);
      callback() 
    }
  })
}

exports.get_objs = function(bucket_name, filter, callback, error){
  _get_next_page(bucket_name, filter, callback, error, {}, undefined)
}

_get_next_page = function(bucket_name, filter, callback, error, objs, marker){ 
  s3.listObjects({Bucket: bucket_name, Marker: marker},
    function(err, data){
      if (err){
        console.log(err)
        error(err)
      }else{
        async.each(data.Contents, function(content, done_key){
          _get_obj(bucket_name, content.Key, filter, objs, done_key)
        }, function(obj_err){
          if(obj_err){
            marker = data.Contents.slice(-1)[0].Key
          }
          _callback_or_get_next_page(bucket_name, filter, callback, error, objs, marker, obj_err, data.isTruncated)
        });
      }
    }
  );
}

_get_obj = function(bucket_name, key, filter, objs, done_key){
  params = {
    Bucket: bucket_name,
    Key: key
  }
  s3.getObject(params, function(obj_err, obj_data){
    if(obj_err){
      console.log(obj_err, obj_err.stack)
      done_key(obj_err)
    }else{
      obj = JSON.parse(obj_data.Body)
      if (filter(obj)){
        objs[key] = obj
      }
      done_key()
    }
  });
}

_callback_or_get_next_page = function(bucket_name, filter, callback, error, objs, marker, obj_err, isTruncated){
  if(obj_err){
    error(obj_err)
  }else{
    if (isTruncated){
      _get_next_page(bucket_name, filter, callback, error, objs, marker)
    }else{
      callback(objs)
    }
  }
}

exports.delete_obj = function(bucket_name, key, callback, error){
  var params = {
    Bucket: bucket_name,
    Key: key
  }
  s3.deleteObject(params, function(err, data) {
    if (err){
      console.log(err, err.stack)
      error(err)
    }else{
      console.log('delete', data)
      callback()
    }
  });
}
